@page "/"

@using System.Reflection

<h1>Script result: @_returnValue</h1>
<div>
    <button onclick="@CompileAndRun">Compile And Run</button>
</div>
<div>
    <textarea cols="50" rows="25" @bind="_textarea" @bind:event="oninput"></textarea>
</div>

@code {

    [Inject]
    ScriptLoaderService _scriptLoaderService { get; set; }

    string _returnValue = "";

    string _textarea = @"
using System;

namespace RoslynCompileSample
{
    public class Writer
    {
        public string Write(string message)
        {
            var ret = message + DateTime.Now;
            return ret;
        }
    }
};
";
    async Task CompileAndRun()
    {
        // compile script to in memory dll assembly
        var scriptAssembly = await _scriptLoaderService.CompileToDLLAssembly(_textarea);
        // use relflection to load our type (a shared porject with interfaces wqould help here ... )
        Type type = scriptAssembly.GetType("RoslynCompileSample.Writer");
        // create an instance
        object obj = Activator.CreateInstance(type);
        // call our test function
        _returnValue = (string)type.InvokeMember("Write", BindingFlags.Default | BindingFlags.InvokeMethod, null, obj, new object[] { "Hello World" });
    }
}